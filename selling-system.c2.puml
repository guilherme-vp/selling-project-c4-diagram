@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!define GCPPuml https://raw.githubusercontent.com/davidholsgrove/gcp-icons-for-plantuml/master/dist


' DEVICONS
!include DEVICONS/firebase.puml

' FONTAWESOME
!include FONTAWESOME/mobile.puml
!include FONTAWESOME/link.puml
!include FONTAWESOME/cog.puml

' GCP
!include GCPPuml/GCPCommon.puml
' Computing
!include GCPPuml/Compute/CloudFunctions.puml
' Databases
!include GCPPuml/Databases/CloudFirestore.puml
' Storage
!include GCPPuml/Storage/CloudStorage.puml
' Networking
!include GCPPuml/Networking/DedicatedInterconnect.puml
!include GCPPuml/Networking/CloudRouter.puml
' Tools
!include GCPPuml/Security/CloudIAM.puml
!include GCPPuml/ManagementTools/Monitoring.puml
!include GCPPuml/ManagementTools/Logging.puml

title Selling System - Container Diagram

' General Entities
Person(seller, "Seller", "Seller wanting to register a sell order")
System_Boundary(c1, "Selling System") {
	Container(app, "Mobile Application", "Kotlin", "Provides a mobile interface for sellers to view the catalog of products and register a sell order", $sprite="mobile")
	Container(firebase, "Firebase SDK", "", "Provides set of tools to integrate with GCP services (auth, database, storage, etc.)", $sprite="firebase")

' GCP Entities
	Boundary(gcp, "Google Cloud Platform (GCP) Project", "Cloud platform responsible for enabling infrastructure services, development tools, and scalable solutions") {
		Boundary(gcpRegion, "Region") {
			Boundary(gcpRegionTools, "Firebase Tools") {
				Container(gcpFirebaseAuth, "Authentication", "Firebase", "Allows users to authenticate using their credentials", $sprite="CloudIAM")
				Container(gcpFirebaseDynamicLinks, "Dynamic Links", "Firebase", "Redirect users to certain parts of the app", $sprite="link,color=#a7c9eb")
				Container(gcpFirebaseCrashlytics, "Crashlytics", "Firebase", "Tracks errors and exceptions", $sprite="cog,color=#a7c9eb")
				Container(gcpFirebaseMonitoring, "Performance Monitoring", "Firebase", "Collects performance data", $sprite="Monitoring")
			}

			Boundary(gcpRegionDatabase, "Database") {
				ContainerDb(gcpDatabaseFirestoreCatalogProducts, "Catalog Products collection", "Firestore, No-SQL", "Stores and caches catalog products", $sprite="CloudFirestore")
				ContainerDb(gcpDatabaseFirestoreSellOrders, "Sell Orders collection", "Firestore, No-SQL", "Stores and caches selling orders", $sprite="CloudFirestore")
			}

			Boundary(gcpRegionStorage, "Storage") {
				Container(gcpStorageSellOrdersAssets, "Sell Orders assets bucket", "Cloud Storage", "Stores assets of Catalog Products", $sprite="CloudStorage")
				Container(gcpStorageCatalogProductsAssets, "Catalog Products assets bucket", "Cloud Storage", "Stores assets of Catalog Products", $sprite="CloudStorage")
			}

			Boundary(gcpRegionComputing, "Compute") {
				Container(gcpComputeFunctionSellOrders, "Sell Orders dispatcher", "Cloud Function", $sprite="CloudFunctions")
				Container(gcpComputeFunctionCatalogProducts, "Catalog Products receiver", "Cloud Function", $sprite="CloudFunctions")
			}

			Container(gcpRouter, "Cloud Router", "Cloud Router", "Provides dynamic routing by using the Border Gateway Protocol", $sprite="CloudRouter")
		}

		Container(gcpInterconnect, "Dedicated Interconnect", "Cloud Router", "Provides a direct physical connection with on-premises network",$sprite="DedicatedInterconnect")
	}
}
System_Ext(sap, "SAP (Systems, Applications & Products)", "ERP responsible for storing the catalog of products and selling orders")


' Relationships

' General Relationships
Rel(seller, app, "Views catalog products from and registers selling orders to", "HTTPS")
Rel(app, firebase, "Authenticates, redirects, registers and query documents, uploads and retrieves assets, and sends informations using", "HTTPS")

' Firebase Relationships
Rel(firebase, gcpDatabaseFirestoreSellOrders, "Fetches and cache Sell orders from", "WS, Memory")
Rel(firebase, gcpDatabaseFirestoreCatalogProducts, "Fetches and cache Products from", "WS, Memory")
Rel(firebase, gcpStorageSellOrdersAssets, "Sends assets to, fetches binary files from", "HTTPS")
Rel(firebase, gcpStorageCatalogProductsAssets, "Fetches binary files from", "HTTPS")

Rel(firebase, gcpFirebaseDynamicLinks, "Receives deep links from", "HTTPS")
Rel(firebase, gcpFirebaseCrashlytics, "Sends logs, traces and exception events to", "HTTPS")
Rel(firebase, gcpFirebaseMonitoring, "Sends HTTP network requests, CPU and RAM usage, etc. to", "HTTPS")
Rel(firebase, gcpFirebaseAuth, "Sends users' credentials to, and receives users' access from", "HTTPS")

' Functions Relationships
Rel_Up(gcpComputeFunctionCatalogProducts, gcpStorageCatalogProductsAssets, "Sends assets to", "HTTPS")
Rel_Up(gcpComputeFunctionCatalogProducts, gcpDatabaseFirestoreCatalogProducts, "Sends updates of Products to", "NoSQL, HTTPS")
Rel_Up(gcpComputeFunctionSellOrders, gcpDatabaseFirestoreSellOrders, "Receives new/updated Sell Orders from", "WS")
Rel(gcpComputeFunctionSellOrders, gcpRouter, "Sends registered Sell Orders to", "HTTPS")
Rel(gcpComputeFunctionCatalogProducts, gcpRouter, "Receives updates of Products from", "HTTPS")

' Networking Relationships
Rel(gcpRouter, gcpInterconnect, "Exchanges routes between GCP and peer network", "BGP")
Rel(gcpInterconnect, sap, "Receives updates of Products from, and sends registered Sell Orders to", "HTTPS")


@enduml